import "Task.poosl"

process class Task34 extends Task

ports 
	In_F2_T1, 
	Out1_F6_T7, 
	Out2_F7_T8,

	In_F3_T1, 
	Out_F8_T8

messages 
	Control!MappedTo(String), In_F2_T1!InspectTokenAvailability(Integer), In_F2_T1!MappedTo(String), In_F2_T1!ReleaseRoom(),
	In_F2_T1?TokensAvailable(), Out1_F6_T7!MappedTo(String), Out1_F6_T7?ReservationSuccessful(), Out1_F6_T7!ReserveRoom(Integer, Integer),
	Out1_F6_T7!WriteTokens(), Out2_F7_T8!MappedTo(String), Out2_F7_T8?ReservationSuccessful(), Out2_F7_T8!ReserveRoom(Integer, Integer),
	Out2_F7_T8!WriteTokens(),
In_F3_T1!InspectTokenAvailability(Integer), In_F3_T1!MappedTo(String), In_F3_T1!ReleaseRoom(),
	In_F3_T1?TokensAvailable(), Out_F8_T8!MappedTo(String), Out_F8_T8?ReservationSuccessful(), Out_F8_T8!ReserveRoom(Integer, Integer),
	Out_F8_T8!WriteTokens()

variables

init 
	Initialise()()

methods

	CheckTokenAvailabilityForReads(Scenario:String)()
		In_F2_T1!InspectTokenAvailability(1);
		In_F2_T1?TokensAvailable;

		if Scenario = "S2" then
			In_F3_T1!InspectTokenAvailability(1);
			In_F3_T1?TokensAvailable
		fi

	NotifyBuffersAboutMapping()()
		par
			In_F2_T1!MappedTo(MapTo)
		and
			Out1_F6_T7!MappedTo(MapTo)
		and
			Out2_F7_T8!MappedTo(MapTo)
		and
			Control!MappedTo(MapTo)
        and
			In_F3_T1!MappedTo(MapTo)
		and
			Out_F8_T8!MappedTo(MapTo)
		rap

	PerformWrites(Scenario:String)()
		Out1_F6_T7!WriteTokens;
		Out2_F7_T8!WriteTokens;

		if Scenario = "S2" then
			Out_F8_T8!WriteTokens
		fi

	ReleaseSpaceForReads(Scenario:String)()
		In_F2_T1!ReleaseRoom;

		if Scenario = "S2" then
			In_F3_T1!ReleaseRoom
		fi

	ReserveSpaceForWrites(Scenario:String,Iteration:Integer)()
	if Scenario = "S1" then
		Out2_F7_T8!ReserveRoom(1,Iteration);
		Out2_F7_T8?ReservationSuccessful
	else
		Out2_F7_T8!ReserveRoom(2,Iteration);
		Out2_F7_T8?ReservationSuccessful
	fi;
		Out1_F6_T7!ReserveRoom(1,Iteration);
		Out1_F6_T7?ReservationSuccessful;

		if Scenario = "S2" then
			Out_F8_T8!ReserveRoom(1, Iteration);
			Out_F8_T8?ReservationSuccessful
		fi

		